{"version":3,"sources":["webpack:///webpack/bootstrap 74518344e62d9cd1a0c0","webpack:///./app/app.js","webpack:///./app/js/Game.js","webpack:///./app/js/Renderer.js","webpack:///./app/js/KeyControl.js","webpack:///./app/js/ControllableShip.js","webpack:///./app/js/Ship.js","webpack:///./app/js/Sprite.js","webpack:///./app/js/Utils.js","webpack:///./~/sat/SAT.js","webpack:///(webpack)/buildin/module.js","webpack:///(webpack)/buildin/amd-define.js","webpack:///./app/js/ship_modules/Engine.js","webpack:///./app/js/ship_modules/ShipModule.js","webpack:///./app/js/Constants.js","webpack:///./app/js/ship_modules/Core.js","webpack:///./app/js/ship_modules/Armor.js","webpack:///./app/js/ship_modules/Wing.js","webpack:///./app/js/ship_modules/gun/Gun.js","webpack:///./app/js/ship_modules/gun/Bullet.js","webpack:///./app/js/DummyShip.js","webpack:///./app/js/Keys.js"],"names":[],"mappings":"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AO,cAAI,kBAAJ,CAAuB,GAAvB,EAA2B,GAA3B,CAAP;AACD,E;;;;;;mEChCD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,EAAE;AACb,YAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;AACA,EAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,cAAa,SAAS;AACtB,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,cAAa,OAAO;AACpB,eAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,OAAO;AACpB,eAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,eAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,OAAO;AACpB,eAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,OAAO;AACpB,eAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB;AACA,eAAc,OAAO;AACrB;AACA;AACA;AACA;AACA,iB;AACA;;AAEA;AACA;AACA,cAAa,OAAO;AACpB,eAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,OAAO;AACpB,eAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,OAAO;AACpB,eAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,OAAO;AACpB,eAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,OAAO;AACpB,eAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa,QAAQ;AACrB,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa,QAAQ;AACrB;AACA,cAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,gBAAgB;AAC7B;AACA,eAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,OAAO;AACpB,eAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,OAAO;AACpB,eAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,eAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,oBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB,eAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,oBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,eAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,eAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,cAAa,QAAQ;AACrB,cAAa,SAAS;AACtB,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA,kBAAiB,QAAQ,OAAO,8BAA8B;;AAE9D;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA,kBAAiB,OAAO,OAAO,mBAAmB;;AAElD;AACA;AACA,aAAY;AACZ;AACA;;AAEA;AACA;AACA,aAAY;AACZ;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,cAAa,eAAe;AAC5B,cAAa,OAAO;AACpB,cAAa,eAAe;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,SAAS;AAC5B;AACA;AACA,uBAAsB,WAAW;AACjC,uBAAsB,WAAW;AACjC;AACA,qBAAoB;AACpB;;AAEA;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB,cAAa,eAAe;AAC5B,cAAa,eAAe;AAC5B,cAAa,OAAO;AACpB;AACA,cAAa,UAAU;AACvB;AACA,eAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+B;AACA,6B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,qC;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,Q;AACA;AACA,6B;AACA,2B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB,gBAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB,2BAA2B;AAC5C;AACA;AACA,0BAAyB,4BAA4B;AACrD;AACA,WAAU,6BAA6B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB,eAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,QAAQ;AACrB,eAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB,cAAa,UAAU;AACvB;AACA,eAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,QAAQ;AACrB,cAAa,OAAO;AACpB,cAAa,UAAU;AACvB;AACA,eAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAmB,SAAS;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;AACA;AACA,mC;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;AACA,kC;AACA;AACA,0B;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;AACA,kC;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+B;AACA,0B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,QAAQ;AACrB,cAAa,UAAU;AACvB;AACA,eAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,QAAQ;AACrB,cAAa,QAAQ;AACrB,cAAa,UAAU;AACvB;AACA,eAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA,oBAAmB,SAAS;AAC5B;AACA;AACA;AACA;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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 74518344e62d9cd1a0c0\n **/","import Game from './js/Game';\r\n\r\nvar canvas = document.getElementById('game');\r\n\r\nlet game = new Game(canvas);\r\ngame.run();\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/app.js\n **/","import Renderer from \"./Renderer\";\nimport KeyControl from \"./KeyControl\";\nimport ControllableShip from \"./ControllableShip\";\nimport DummyShip from \"./DummyShip\";\n\nimport { isSpritesColliding } from \"./Utils\"\n\nimport {KEY_MAP} from \"./Keys\";\n\nconst LAYERS = {\n  BACKGROUND:[],\n  SHIPS:[],\n  SHOTS:[],\n  OVERLAY:[],\n  UI:[]\n};\n\nexport default class Game {\n\n  constructor(canvas) {\n    this.canvas = canvas;\n    canvas.focus();\n    this._keyControl = new KeyControl(this);\n\n    this.renderer = new Renderer(this);\n\n  }\n\n  get keyControl(){\n    return this._keyControl;\n  }\n\n  init(){\n    this.globalTime = 0;\n\n\n    const PLAYER1_SCHEMATIC = [\n      \"  GGG  \",\n      \" GWSWG \",\n      \"SEWXWES\",\n      \"  EEE  \"\n    ];\n\n    const PLAYER2_SCHEMATIC = [\n      \"  SGS  \",\n      \"SEWXWES\",\n      \"  G G  \"\n    ];\n\n    const AI_SCHEMATIC = [\n      \" WXG \",\n      \"  E \"\n    ];\n\n    const PLAYER1_CONTROLS = {\n      ACCELERATE: KEY_MAP.W,\n      TURN_CLOCKWISE: KEY_MAP.D,\n      TURN_COUNTERCLOCKWISE: KEY_MAP.S,\n      FIRE_PRIMARY: KEY_MAP.SPACE\n    };\n\n    const PLAYER2_CONTROLS = {\n      ACCELERATE: KEY_MAP.UP,\n      TURN_CLOCKWISE: KEY_MAP.RIGHT,\n      TURN_COUNTERCLOCKWISE: KEY_MAP.LEFT,\n      FIRE_PRIMARY: KEY_MAP.NUM_0\n    };\n\n    LAYERS.SHIPS.push(new ControllableShip(this, 55,55,0,PLAYER1_SCHEMATIC, PLAYER1_CONTROLS));\n    LAYERS.SHIPS.push(new ControllableShip(this, 455,455,0,PLAYER2_SCHEMATIC, PLAYER2_CONTROLS));\n    LAYERS.SHIPS.push(new DummyShip(this,Math.floor(Math.random()*2000),Math.floor(Math.random()*2000),0,AI_SCHEMATIC));\n    LAYERS.SHIPS.push(new DummyShip(this,Math.floor(Math.random()*2000),Math.floor(Math.random()*2000),0,AI_SCHEMATIC));\n  }\n\n  tickLayer(sprites){\n    sprites.forEach(\n      (s)=>s.tick()\n    );\n  }\n\n  removeShot(toRemove){\n    var i = LAYERS.SHOTS.indexOf(toRemove);\n    LAYERS.SHOTS.splice(i,1);\n  }\n\n  removeShip(toRemove){\n    var i = LAYERS.SHIPS.indexOf(toRemove);\n    LAYERS.SHIPS.splice(i,1);\n\n    if(LAYERS.SHIPS.length == 1){\n      alert(\"Winner!!\")\n    }\n  }\n  handleCollisions(){\n    LAYERS.SHIPS.forEach((ship)=>{\n      LAYERS.SHOTS.forEach((shot)=>{\n        if(isSpritesColliding(ship,shot) && shot.gun.ship != ship){\n          ship.modules.forEach((module)=>{\n            if(isSpritesColliding(module,shot)){\n              ship.collide(shot);\n              shot.collide(module);\n            }\n          });\n        }\n      })\n    })\n  };\n\n  tick(){\n    this.globalTime ++;\n\n    this.tickLayer(LAYERS.BACKGROUND);\n    this.tickLayer(LAYERS.SHIPS);\n    this.tickLayer(LAYERS.SHOTS);\n    this.tickLayer(LAYERS.OVERLAY);\n    this.tickLayer(LAYERS.UI);\n\n    var collisions = this.handleCollisions();\n  }\n\n  draw(){\n    this.renderer.render([\n      LAYERS.SHIPS,\n      LAYERS.SHOTS\n    ]);\n  }\n  run(){\n    this.init();\n\n    setInterval(function(){\n      this.tick();\n      this.draw();\n    }.bind(this),1000/60);\n\n  }\n\n  spawn(sprite, layer = \"SHOTS\"){\n    LAYERS.SHOTS.push(sprite);\n  }\n\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/js/Game.js\n **/","const TOOLBAR_HEIGHT = 120;\n\nexport default class Renderer {\n  constructor(game){\n    this.game = game;\n    const canvas = game.canvas;\n    this.canvas = canvas;\n    this.screen = canvas.getContext('2d');\n    this.canvas.style.cursor = \"none\";\n    this.screenWidth = canvas.getAttribute(\"width\");\n    this.screenHeight = canvas.getAttribute(\"height\");\n\n  }\n\n  render(sprite_lists){\n    this.clearScreen();\n\n\n\n    sprite_lists.forEach((sprites)=>\n      sprites.forEach((sprite)=> sprite.draw(this.screen))\n    );\n  }\n\n  clearScreen(){\n    this.screen.fillStyle = \"rgba(234,234,234,0.55)\";\n    this.screen.fillRect(0,0,this.screenWidth, this.screenHeight);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/js/Renderer.js\n **/","export default class KeyControl {\n  constructor(game){\n    this.canvas = game.canvas;\n\n    this.keyCallbacks = {};\n    this.keyUpCallbacks = {};\n\n    this.canvas.onkeydown = this.triggerKeyDownCallbacks.bind(this);\n\n    this.canvas.onkeyup = function(e){\n      var callbacks = this.keyUpCallbacks[e.keyCode];\n      if(callbacks){\n        for (var cb = 0; cb < callbacks.length; cb++) {\n          callbacks[cb]();\n        }\n      }\n    }.bind(this);\n  }\n\n  triggerKeyDownCallbacks(e){\n    var keyCode = e.keyCode;\n    // console.log(keyCode);\n    var callbacks = this.keyCallbacks[keyCode];\n    if(callbacks){\n      for (var cb = 0; cb < callbacks.length; cb++) {\n        callbacks[cb]();\n      }\n    }\n\n  }\n\n  onKeyDown(key, callback) {\n    if(this.keyCallbacks[key] === undefined){\n      this.keyCallbacks[key] = [];\n    }\n    this.keyCallbacks[key].push(callback);\n  }\n\n  onKeyUp(key, callback) {\n    if(this.keyUpCallbacks[key] === undefined){\n      this.keyUpCallbacks[key] = [];\n    }\n    this.keyUpCallbacks[key].push(callback);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/js/KeyControl.js\n **/","import Ship from \"./Ship\"\n\nexport default class ControllableShip extends Ship {\n\n  constructor(game, x, y , angle, schematic, keyBindings) {\n    super(game, x,y,angle, schematic);\n    this.keyBindings = keyBindings;\n\n    this.bindKeys(keyBindings);\n  }\n\n  bindKeys(keyBindings) {\n    this.game.keyControl.onKeyDown(keyBindings.ACCELERATE, ()=> this.accelerating = true);\n    this.game.keyControl.onKeyDown(keyBindings.TURN_CLOCKWISE, ()=> this._turningCW = true);\n    this.game.keyControl.onKeyDown(keyBindings.TURN_COUNTERCLOCKWISE, ()=> this._turningCCW = true);\n    this.game.keyControl.onKeyDown(keyBindings.FIRE_PRIMARY, ()=> this._firingPrimary = true);\n\n    this.game.keyControl.onKeyUp(keyBindings.ACCELERATE, ()=> this.accelerating = false);\n    this.game.keyControl.onKeyUp(keyBindings.TURN_CLOCKWISE, ()=> this._turningCW = false);\n    this.game.keyControl.onKeyUp(keyBindings.TURN_COUNTERCLOCKWISE, ()=> this._turningCCW = false);\n    this.game.keyControl.onKeyUp(keyBindings.FIRE_PRIMARY, ()=> this._firingPrimary = false);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/js/ControllableShip.js\n **/","import Sprite from \"./Sprite\";\n\nimport Engine from \"./ship_modules/Engine\";\nimport Core from \"./ship_modules/Core\";\nimport Armor from \"./ship_modules/Armor\";\nimport Wing from \"./ship_modules/Wing\";\nimport Gun from \"./ship_modules/gun/Gun\";\n\nimport {DEGREE, BLOCK_SIZE} from \"./Constants\"\n\nvar _x,_y,_dx,_dy,_width,_height, _angle,_pivotX,_pivotY;\nvar _enginePower, _turnPower, _mass, _cost;\n\nvar _turningCW, _turningCCW, _accelerating, _firingPrimary;\nvar _modules;\n//\n\nexport default class Ship extends Sprite {\n\n  constructor(game, x, y, angle, schematic) {\n    super();\n    this.schematic = schematic;\n    this.game = game;\n    this._x = x;\n    this._y = y;\n    this._dx = 0;\n    this._dy = 0;\n\n    this._firingPrimary = false;\n\n    this._accelerating = false;\n\n    this._angle = angle;\n\n    this._turningCCW = false;\n    this._turningCW = false;\n\n    this.loadParts();\n  }\n\n  get globalAngle() {\n    return this._angle;\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  get height(){\n    return this._height;\n  }\n\n  get globalX(){\n    return this._x;\n  }\n\n  get globalY(){\n    return this._y\n  }\n\n  get drawParent(){\n    return undefined\n  }\n\n  get pivotX() {\n    return this._pivotX;\n  }\n\n  get pivotY(){\n    return this._pivotY;\n  }\n\n  get x(){\n    return this._x;\n  }\n  get y(){\n    return this._y;\n  }\n\n  get accelerating(){\n    return this._accelerating;\n  }\n\n  set accelerating(isAccelerating){\n    this._accelerating = isAccelerating\n  }\n\n  removeModule(moduleToRemove){\n    for (var y = 0; y < this._modules.length; y++) {\n      var row = this._modules[y];\n      for (var x = 0; x < row.length; x++) {\n        var module = row[x];\n\n        if(module === moduleToRemove){\n          this._modules[y][x] = undefined;\n          this.recalculateAggregateProperties();\n        }\n      }\n    }\n  }\n\n  loadParts(){\n    this._modules = [];\n\n    for (var row = 0; row < this.schematic.length; row++) {\n      var y = row*BLOCK_SIZE;\n\n      var partsRow = [];\n      this._modules.push(partsRow);\n      var positions = this.schematic[row].split(\"\");\n      for (var pos = 0; pos < positions.length; pos++) {\n        var x = pos*BLOCK_SIZE;\n\n        var block = positions[pos];\n        if(block === \"E\"){\n          var engine = new Engine(this,x,y);\n          partsRow.push(engine)\n        }else if(block === \"S\"){\n          partsRow.push(new Armor(this,x,y));\n        }else if(block === \"G\"){\n          var gun = new Gun(this,x,y);\n          partsRow.push(gun);\n        }else if(block === \"W\"){\n          partsRow.push(new Wing(this, true,x,y));\n        }else if(block === \"X\"){\n          this._pivotX = pos*BLOCK_SIZE + BLOCK_SIZE/2;\n          this._pivotY = row*BLOCK_SIZE + BLOCK_SIZE/2;\n          partsRow.push(new Core(this,x,y));\n        }else{\n          partsRow.push(undefined);\n        }\n      }\n    }\n\n    this.recalculateAggregateProperties();\n    this.calculateWidthAndHeight();\n  }\n\n\n  get enginePower(){\n    return this._enginePower;\n  }\n  get mass(){\n    return this._mass;\n  }\n  get turnPower(){\n    return this._turnPower;\n  }\n  get cost(){\n    return this._cost;\n  }\n\n  recalculateAggregateProperties() {\n    var allParts = this.modules;\n\n    this._mass = allParts.map((p)=>p.mass).reduce((a, b)=>a + b, 0);\n    this._enginePower = allParts.map((p)=>p.enginePower).reduce((a, b)=>a + b, 0);\n    this._turnPower = allParts.map((p)=>p.turnPower).reduce((a, b)=>a + b, 0);\n    this._cost = allParts.map((p)=>p.cost).reduce((a, b)=>a + b, 0);\n\n    this.modulesThatTick = allParts.filter((p)=>p.tick != undefined)\n  }\n\n\n  calculateWidthAndHeight(){\n    var lowestX=1000;\n    var lowestY=1000;\n    var highestX=-1;\n    var highestY=-1;\n    for (var y = 0; y < this._modules.length; y++) {\n      var row = this._modules[y];\n      for (var x = 0; x < row.length; x++) {\n        var module = row[x];\n        if(module !== undefined){\n          if(x<lowestX){\n            lowestX = x;\n          }\n          if(x>highestX){\n            highestX = x;\n          }\n          if(y<lowestY){\n            lowestY = y;\n          }\n          if(y>highestY){\n            highestY = y;\n          }\n        }\n      }\n    }\n\n    this._width = (highestX-lowestX+1)*BLOCK_SIZE;\n    this._height = (highestY-lowestY+1)*BLOCK_SIZE;\n  }\n\n  draw(screen){\n    screen.save();\n    screen.translate(this._x,this._y);\n    screen.rotate(90*DEGREE);\n    screen.rotate(this._angle);\n\n    screen.translate(-this.pivotX,-this.pivotY);\n\n    for (var row = 0; row < this._modules.length; row++) {\n      var positions = this._modules[row];\n      for (var pos = 0; pos < positions.length; pos++) {\n        var block = positions[pos];\n        if(block != undefined){\n          block.draw(screen);\n        }\n      }\n    }\n    screen.restore();\n\n    // this.drawBoundingBox(screen);\n  }\n\n  get modules(){\n    return [].concat.apply([], this._modules).filter((p)=> p != undefined);\n  }\n\n  collide(collidedWith){}\n\n  get movementAngleRadians(){\n    var radians = Math.atan2(this._dy,this._dx);\n    return radians;\n  }\n\n  get drag(){\n    return this.physicsDrag;\n  }\n\n  get physicsDrag() {\n    const fluidDensity = 0.5;\n    const frontalArea = this.mass;\n    const speed = Math.sqrt(Math.pow(this._dx,2)+Math.pow(this._dy,2));\n    const dragForce = 0.05*fluidDensity*frontalArea*Math.pow(speed,2);\n\n    return dragForce/this.mass;\n  }\n\n  get acceleration() {\n    return (this.enginePower / this.mass);\n  }\n\n  get turnSpeed() {\n    return this.turnPower / this.mass * DEGREE;\n  }\n  get angle() {\n    return this._angle;\n  }\n\n  tickModules(){\n    this.modulesThatTick.forEach((m)=>m.tick());\n  }\n\n  tick() {\n    this.tickModules();\n\n    this.calculateNewAngle();\n    this.calculateNewSpeeds();\n    this.moveAccordingToSpeed();\n\n    this.wrapAroundWorld();\n  }\n\n  moveAccordingToSpeed(){\n    this._x += this._dx;\n    this._y += this._dy;\n  }\n\n  wrapAroundWorld(){\n    var cw = this.game.canvas.getAttribute(\"width\");\n    var ch = this.game.canvas.getAttribute(\"height\");\n    if(this._x < 0){\n      this._x = cw - this._x;\n    }else if(this._x > cw){\n      this._x = this._x - cw;\n    }\n    if(this._y < 0){\n      this._y = ch - this._y;\n    }else if(this._y > ch){\n      this._y = this._y - ch;\n    }\n  }\n\n  calculateNewAngle(){\n    if(this._turningCCW){\n      this._angle -= this.turnSpeed ;\n    }\n    if(this._turningCW){\n      this._angle += this.turnSpeed ;\n    }\n  }\n\n  calculateNewSpeeds(){\n    if(this.accelerating ){\n      var accX = Math.cos(this._angle)*this.acceleration;\n      this._dx = this._dx + accX;\n\n      var accY = Math.sin(this._angle)*this.acceleration;\n      this._dy = this._dy + accY;\n    }\n\n    var breakX = Math.cos(this.movementAngleRadians)*this.drag;\n    this._dx = this._dx - breakX;\n\n    var breakY = Math.sin(this.movementAngleRadians)*this.drag;\n    this._dy = this._dy - breakY;\n\n    if(this.speed < 0.15){\n      this._dx = 0;\n      this._dy = 0;\n    }\n  }\n\n  get speed() {\n    return Math.sqrt(Math.pow(this._dx,2)+Math.pow(this._dy,2));\n  }\n  \n  die(){\n    console.log(\"Ship destroyed!\");\n    this.game.removeShip(this);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/js/Ship.js\n **/","import {boundingBox} from \"./Utils\"\n\nexport default class Sprite {\n\n\n  draw(screen){};\n  tick(){};\n  get width(){};\n  get height(){};\n  get globalX(){};\n  get globalY(){};\n  get globalAngle(){};\n  get drawParent(){};\n\n  get collide(){\n    throw \"Unimplemented collide in \"+this.constructor.name;\n  }\n\n  get pivotX(){\n    return this.width/2;\n  }\n\n  get pivotY(){\n    return this.height/2;\n  }\n\n  drawBoundingBox(screen){\n    const bbox = boundingBox(this);\n    screen.beginPath();\n    bbox.points.forEach((p)=>{\n      screen.lineTo(p.x,p.y)\n    });\n    screen.closePath();\n    screen.strokeStyle = \"orange\";\n    screen.stroke();\n\n  }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/js/Sprite.js\n **/","import SAT from \"sat\";\n\nconst V = SAT.Vector;\nconst B = SAT.Box;\n\n\nexport function boundingBox(sprite) {\n\n  if(sprite.width === undefined) throw \"No width: \"+sprite.constructor.name;\n  if(sprite.height === undefined) throw \"No height!\"+sprite.constructor.name;\n  if(sprite.pivotX === undefined) throw \"No pivotX!\"+sprite.constructor.name;\n  if(sprite.pivotY === undefined) throw \"No pivotY!\"+sprite.constructor.name;\n  if(sprite.globalAngle === undefined) throw \"No global angle!\"+sprite.constructor.name;\n  if(sprite.globalX === undefined) throw \"No globalX!\"+sprite.constructor.name;\n  if(sprite.globalY === undefined) throw \"No globalY!\"+sprite.constructor.name;\n\n  const bbox = new B(new V(0,0), sprite.width,sprite.height).toPolygon();\n\n  bbox.translate(-sprite.pivotX, -sprite.pivotY);\n  bbox.rotate(sprite.globalAngle + Math.PI/2);\n  bbox.translate(sprite.globalX,sprite.globalY);\n\n  return bbox\n}\n\nexport function isSpritesColliding(s1, s2){\n  if(s1 === s2) return false;\n\n  var bb1 = boundingBox(s1);\n  var bb2 = boundingBox(s2);\n\n  return SAT.testPolygonPolygon(bb1,bb2);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/js/Utils.js\n **/","// Version 0.5.0 - Copyright 2012 - 2015 -  Jim Riecken <jimr@jimr.ca>\n//\n// Released under the MIT License - https://github.com/jriecken/sat-js\n//\n// A simple library for determining intersections of circles and\n// polygons using the Separating Axis Theorem.\n/** @preserve SAT.js - Version 0.5.0 - Copyright 2012 - 2015 - Jim Riecken <jimr@jimr.ca> - released under the MIT License. https://github.com/jriecken/sat-js */\n\n/*global define: false, module: false*/\n/*jshint shadow:true, sub:true, forin:true, noarg:true, noempty:true, \n  eqeqeq:true, bitwise:true, strict:true, undef:true, \n  curly:true, browser:true */\n\n// Create a UMD wrapper for SAT. Works in:\n//\n//  - Plain browser via global SAT variable\n//  - AMD loader (like require.js)\n//  - Node.js\n//\n// The quoted properties all over the place are used so that the Closure Compiler\n// does not mangle the exposed API in advanced mode.\n/**\n * @param {*} root - The global scope\n * @param {Function} factory - Factory that creates SAT module\n */\n(function (root, factory) {\n  \"use strict\";\n  if (typeof define === 'function' && define['amd']) {\n    define(factory);\n  } else if (typeof exports === 'object') {\n    module['exports'] = factory();\n  } else {\n    root['SAT'] = factory();\n  }\n}(this, function () {\n  \"use strict\";\n\n  var SAT = {};\n\n  //\n  // ## Vector\n  //\n  // Represents a vector in two dimensions with `x` and `y` properties.\n\n\n  // Create a new Vector, optionally passing in the `x` and `y` coordinates. If\n  // a coordinate is not specified, it will be set to `0`\n  /** \n   * @param {?number=} x The x position.\n   * @param {?number=} y The y position.\n   * @constructor\n   */\n  function Vector(x, y) {\n    this['x'] = x || 0;\n    this['y'] = y || 0;\n  }\n  SAT['Vector'] = Vector;\n  // Alias `Vector` as `V`\n  SAT['V'] = Vector;\n\n\n  // Copy the values of another Vector into this one.\n  /**\n   * @param {Vector} other The other Vector.\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['copy'] = Vector.prototype.copy = function(other) {\n    this['x'] = other['x'];\n    this['y'] = other['y'];\n    return this;\n  };\n\n  // Create a new vector with the same coordinates as this on.\n  /**\n   * @return {Vector} The new cloned vector\n   */\n  Vector.prototype['clone'] = Vector.prototype.clone = function() {\n    return new Vector(this['x'], this['y']);\n  };\n\n  // Change this vector to be perpendicular to what it was before. (Effectively\n  // roatates it 90 degrees in a clockwise direction)\n  /**\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['perp'] = Vector.prototype.perp = function() {\n    var x = this['x'];\n    this['x'] = this['y'];\n    this['y'] = -x;\n    return this;\n  };\n\n  // Rotate this vector (counter-clockwise) by the specified angle (in radians).\n  /**\n   * @param {number} angle The angle to rotate (in radians)\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['rotate'] = Vector.prototype.rotate = function (angle) {\n    var x = this['x'];\n    var y = this['y'];\n    this['x'] = x * Math.cos(angle) - y * Math.sin(angle);\n    this['y'] = x * Math.sin(angle) + y * Math.cos(angle);\n    return this;\n  };\n\n  // Reverse this vector.\n  /**\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['reverse'] = Vector.prototype.reverse = function() {\n    this['x'] = -this['x'];\n    this['y'] = -this['y'];\n    return this;\n  };\n  \n\n  // Normalize this vector.  (make it have length of `1`)\n  /**\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['normalize'] = Vector.prototype.normalize = function() {\n    var d = this.len();\n    if(d > 0) {\n      this['x'] = this['x'] / d;\n      this['y'] = this['y'] / d;\n    }\n    return this;\n  };\n  \n  // Add another vector to this one.\n  /**\n   * @param {Vector} other The other Vector.\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['add'] = Vector.prototype.add = function(other) {\n    this['x'] += other['x'];\n    this['y'] += other['y'];\n    return this;\n  };\n  \n  // Subtract another vector from this one.\n  /**\n   * @param {Vector} other The other Vector.\n   * @return {Vector} This for chaiing.\n   */\n  Vector.prototype['sub'] = Vector.prototype.sub = function(other) {\n    this['x'] -= other['x'];\n    this['y'] -= other['y'];\n    return this;\n  };\n  \n  // Scale this vector. An independant scaling factor can be provided\n  // for each axis, or a single scaling factor that will scale both `x` and `y`.\n  /**\n   * @param {number} x The scaling factor in the x direction.\n   * @param {?number=} y The scaling factor in the y direction.  If this\n   *   is not specified, the x scaling factor will be used.\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['scale'] = Vector.prototype.scale = function(x,y) {\n    this['x'] *= x;\n    this['y'] *= y || x;\n    return this; \n  };\n  \n  // Project this vector on to another vector.\n  /**\n   * @param {Vector} other The vector to project onto.\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['project'] = Vector.prototype.project = function(other) {\n    var amt = this.dot(other) / other.len2();\n    this['x'] = amt * other['x'];\n    this['y'] = amt * other['y'];\n    return this;\n  };\n  \n  // Project this vector onto a vector of unit length. This is slightly more efficient\n  // than `project` when dealing with unit vectors.\n  /**\n   * @param {Vector} other The unit vector to project onto.\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['projectN'] = Vector.prototype.projectN = function(other) {\n    var amt = this.dot(other);\n    this['x'] = amt * other['x'];\n    this['y'] = amt * other['y'];\n    return this;\n  };\n  \n  // Reflect this vector on an arbitrary axis.\n  /**\n   * @param {Vector} axis The vector representing the axis.\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['reflect'] = Vector.prototype.reflect = function(axis) {\n    var x = this['x'];\n    var y = this['y'];\n    this.project(axis).scale(2);\n    this['x'] -= x;\n    this['y'] -= y;\n    return this;\n  };\n  \n  // Reflect this vector on an arbitrary axis (represented by a unit vector). This is\n  // slightly more efficient than `reflect` when dealing with an axis that is a unit vector.\n  /**\n   * @param {Vector} axis The unit vector representing the axis.\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['reflectN'] = Vector.prototype.reflectN = function(axis) {\n    var x = this['x'];\n    var y = this['y'];\n    this.projectN(axis).scale(2);\n    this['x'] -= x;\n    this['y'] -= y;\n    return this;\n  };\n  \n  // Get the dot product of this vector and another.\n  /**\n   * @param {Vector}  other The vector to dot this one against.\n   * @return {number} The dot product.\n   */\n  Vector.prototype['dot'] = Vector.prototype.dot = function(other) {\n    return this['x'] * other['x'] + this['y'] * other['y'];\n  };\n  \n  // Get the squared length of this vector.\n  /**\n   * @return {number} The length^2 of this vector.\n   */\n  Vector.prototype['len2'] = Vector.prototype.len2 = function() {\n    return this.dot(this);\n  };\n  \n  // Get the length of this vector.\n  /**\n   * @return {number} The length of this vector.\n   */\n  Vector.prototype['len'] = Vector.prototype.len = function() {\n    return Math.sqrt(this.len2());\n  };\n  \n  // ## Circle\n  //\n  // Represents a circle with a position and a radius.\n\n  // Create a new circle, optionally passing in a position and/or radius. If no position\n  // is given, the circle will be at `(0,0)`. If no radius is provided, the circle will\n  // have a radius of `0`.\n  /**\n   * @param {Vector=} pos A vector representing the position of the center of the circle\n   * @param {?number=} r The radius of the circle\n   * @constructor\n   */\n  function Circle(pos, r) {\n    this['pos'] = pos || new Vector();\n    this['r'] = r || 0;\n  }\n  SAT['Circle'] = Circle;\n  \n  // Compute the axis-aligned bounding box (AABB) of this Circle.\n  //\n  // Note: Returns a _new_ `Polygon` each time you call this.\n  /**\n   * @return {Polygon} The AABB\n   */\n  Circle.prototype['getAABB'] = Circle.prototype.getAABB = function() {\n    var r = this['r'];\n    var corner = this[\"pos\"].clone().sub(new Vector(r, r));\n    return new Box(corner, r*2, r*2).toPolygon();\n  };\n\n  // ## Polygon\n  //\n  // Represents a *convex* polygon with any number of points (specified in counter-clockwise order)\n  //\n  // Note: Do _not_ manually change the `points`, `angle`, or `offset` properties. Use the\n  // provided setters. Otherwise the calculated properties will not be updated correctly.\n  //\n  // `pos` can be changed directly.\n\n  // Create a new polygon, passing in a position vector, and an array of points (represented\n  // by vectors relative to the position vector). If no position is passed in, the position\n  // of the polygon will be `(0,0)`.\n  /**\n   * @param {Vector=} pos A vector representing the origin of the polygon. (all other\n   *   points are relative to this one)\n   * @param {Array.<Vector>=} points An array of vectors representing the points in the polygon,\n   *   in counter-clockwise order.\n   * @constructor\n   */\n  function Polygon(pos, points) {\n    this['pos'] = pos || new Vector();\n    this['angle'] = 0;\n    this['offset'] = new Vector();\n    this.setPoints(points || []);\n  }\n  SAT['Polygon'] = Polygon;\n  \n  // Set the points of the polygon.\n  /**\n   * @param {Array.<Vector>=} points An array of vectors representing the points in the polygon,\n   *   in counter-clockwise order.\n   * @return {Polygon} This for chaining.\n   */\n  Polygon.prototype['setPoints'] = Polygon.prototype.setPoints = function(points) {\n    // Only re-allocate if this is a new polygon or the number of points has changed.\n    var lengthChanged = !this['points'] || this['points'].length !== points.length;\n    if (lengthChanged) {\n      var i;\n      var calcPoints = this['calcPoints'] = [];\n      var edges = this['edges'] = [];\n      var normals = this['normals'] = [];\n      // Allocate the vector arrays for the calculated properties\n      for (i = 0; i < points.length; i++) {\n        calcPoints.push(new Vector());\n        edges.push(new Vector());\n        normals.push(new Vector());\n      }\n    }\n    this['points'] = points;\n    this._recalc();\n    return this;\n  };\n\n  // Set the current rotation angle of the polygon.\n  /**\n   * @param {number} angle The current rotation angle (in radians).\n   * @return {Polygon} This for chaining.\n   */\n  Polygon.prototype['setAngle'] = Polygon.prototype.setAngle = function(angle) {\n    this['angle'] = angle;\n    this._recalc();\n    return this;\n  };\n\n  // Set the current offset to apply to the `points` before applying the `angle` rotation.\n  /**\n   * @param {Vector} offset The new offset vector.\n   * @return {Polygon} This for chaining.\n   */\n  Polygon.prototype['setOffset'] = Polygon.prototype.setOffset = function(offset) {\n    this['offset'] = offset;\n    this._recalc();\n    return this;\n  };\n\n  // Rotates this polygon counter-clockwise around the origin of *its local coordinate system* (i.e. `pos`).\n  //\n  // Note: This changes the **original** points (so any `angle` will be applied on top of this rotation).\n  /**\n   * @param {number} angle The angle to rotate (in radians)\n   * @return {Polygon} This for chaining.\n   */\n  Polygon.prototype['rotate'] = Polygon.prototype.rotate = function(angle) {\n    var points = this['points'];\n    var len = points.length;\n    for (var i = 0; i < len; i++) {\n      points[i].rotate(angle);\n    }\n    this._recalc();\n    return this;\n  };\n\n  // Translates the points of this polygon by a specified amount relative to the origin of *its own coordinate\n  // system* (i.e. `pos`).\n  //\n  // This is most useful to change the \"center point\" of a polygon. If you just want to move the whole polygon, change\n  // the coordinates of `pos`.\n  //\n  // Note: This changes the **original** points (so any `offset` will be applied on top of this translation)\n  /**\n   * @param {number} x The horizontal amount to translate.\n   * @param {number} y The vertical amount to translate.\n   * @return {Polygon} This for chaining.\n   */\n  Polygon.prototype['translate'] = Polygon.prototype.translate = function (x, y) {\n    var points = this['points'];\n    var len = points.length;\n    for (var i = 0; i < len; i++) {\n      points[i].x += x;\n      points[i].y += y;\n    }\n    this._recalc();\n    return this;\n  };\n\n\n  // Computes the calculated collision polygon. Applies the `angle` and `offset` to the original points then recalculates the\n  // edges and normals of the collision polygon.\n  /**\n   * @return {Polygon} This for chaining.\n   */\n  Polygon.prototype._recalc = function() {\n    // Calculated points - this is what is used for underlying collisions and takes into account\n    // the angle/offset set on the polygon.\n    var calcPoints = this['calcPoints'];\n    // The edges here are the direction of the `n`th edge of the polygon, relative to\n    // the `n`th point. If you want to draw a given edge from the edge value, you must\n    // first translate to the position of the starting point.\n    var edges = this['edges'];\n    // The normals here are the direction of the normal for the `n`th edge of the polygon, relative\n    // to the position of the `n`th point. If you want to draw an edge normal, you must first\n    // translate to the position of the starting point.\n    var normals = this['normals'];\n    // Copy the original points array and apply the offset/angle\n    var points = this['points'];\n    var offset = this['offset'];\n    var angle = this['angle'];\n    var len = points.length;\n    var i;\n    for (i = 0; i < len; i++) {\n      var calcPoint = calcPoints[i].copy(points[i]);\n      calcPoint.x += offset.x;\n      calcPoint.y += offset.y;\n      if (angle !== 0) {\n        calcPoint.rotate(angle);\n      }\n    }\n    // Calculate the edges/normals\n    for (i = 0; i < len; i++) {\n      var p1 = calcPoints[i];\n      var p2 = i < len - 1 ? calcPoints[i + 1] : calcPoints[0];\n      var e = edges[i].copy(p2).sub(p1);\n      normals[i].copy(e).perp().normalize();\n    }\n    return this;\n  };\n  \n  \n  // Compute the axis-aligned bounding box. Any current state\n  // (translations/rotations) will be applied before constructing the AABB.\n  //\n  // Note: Returns a _new_ `Polygon` each time you call this.\n  /**\n   * @return {Polygon} The AABB\n   */\n  Polygon.prototype[\"getAABB\"] = Polygon.prototype.getAABB = function() {\n    var points = this[\"calcPoints\"];\n    var len = points.length;\n    var xMin = points[0][\"x\"];\n    var yMin = points[0][\"y\"];\n    var xMax = points[0][\"x\"];\n    var yMax = points[0][\"y\"];\n    for (var i = 1; i < len; i++) {\n      var point = points[i];\n      if (point[\"x\"] < xMin) {\n        xMin = point[\"x\"];\n      }\n      else if (point[\"x\"] > xMax) {\n        xMax = point[\"x\"];\n      }\n      if (point[\"y\"] < yMin) {\n        yMin = point[\"y\"];\n      }\n      else if (point[\"y\"] > yMax) {\n        yMax = point[\"y\"];\n      }\n    }\n    return new Box(this[\"pos\"].clone().add(new Vector(xMin, yMin)), xMax - xMin, yMax - yMin).toPolygon();\n  };\n  \n\n  // ## Box\n  //\n  // Represents an axis-aligned box, with a width and height.\n\n\n  // Create a new box, with the specified position, width, and height. If no position\n  // is given, the position will be `(0,0)`. If no width or height are given, they will\n  // be set to `0`.\n  /**\n   * @param {Vector=} pos A vector representing the top-left of the box.\n   * @param {?number=} w The width of the box.\n   * @param {?number=} h The height of the box.\n   * @constructor\n   */\n  function Box(pos, w, h) {\n    this['pos'] = pos || new Vector();\n    this['w'] = w || 0;\n    this['h'] = h || 0;\n  }\n  SAT['Box'] = Box;\n\n  // Returns a polygon whose edges are the same as this box.\n  /**\n   * @return {Polygon} A new Polygon that represents this box.\n   */\n  Box.prototype['toPolygon'] = Box.prototype.toPolygon = function() {\n    var pos = this['pos'];\n    var w = this['w'];\n    var h = this['h'];\n    return new Polygon(new Vector(pos['x'], pos['y']), [\n     new Vector(), new Vector(w, 0), \n     new Vector(w,h), new Vector(0,h)\n    ]);\n  };\n  \n  // ## Response\n  //\n  // An object representing the result of an intersection. Contains:\n  //  - The two objects participating in the intersection\n  //  - The vector representing the minimum change necessary to extract the first object\n  //    from the second one (as well as a unit vector in that direction and the magnitude\n  //    of the overlap)\n  //  - Whether the first object is entirely inside the second, and vice versa.\n  /**\n   * @constructor\n   */  \n  function Response() {\n    this['a'] = null;\n    this['b'] = null;\n    this['overlapN'] = new Vector();\n    this['overlapV'] = new Vector();\n    this.clear();\n  }\n  SAT['Response'] = Response;\n\n  // Set some values of the response back to their defaults.  Call this between tests if\n  // you are going to reuse a single Response object for multiple intersection tests (recommented\n  // as it will avoid allcating extra memory)\n  /**\n   * @return {Response} This for chaining\n   */\n  Response.prototype['clear'] = Response.prototype.clear = function() {\n    this['aInB'] = true;\n    this['bInA'] = true;\n    this['overlap'] = Number.MAX_VALUE;\n    return this;\n  };\n\n  // ## Object Pools\n\n  // A pool of `Vector` objects that are used in calculations to avoid\n  // allocating memory.\n  /**\n   * @type {Array.<Vector>}\n   */\n  var T_VECTORS = [];\n  for (var i = 0; i < 10; i++) { T_VECTORS.push(new Vector()); }\n  \n  // A pool of arrays of numbers used in calculations to avoid allocating\n  // memory.\n  /**\n   * @type {Array.<Array.<number>>}\n   */\n  var T_ARRAYS = [];\n  for (var i = 0; i < 5; i++) { T_ARRAYS.push([]); }\n\n  // Temporary response used for polygon hit detection.\n  /**\n   * @type {Response}\n   */\n  var T_RESPONSE = new Response();\n\n  // Unit square polygon used for polygon hit detection.\n  /**\n   * @type {Polygon}\n   */\n  var UNIT_SQUARE = new Box(new Vector(), 1, 1).toPolygon();\n\n  // ## Helper Functions\n\n  // Flattens the specified array of points onto a unit vector axis,\n  // resulting in a one dimensional range of the minimum and\n  // maximum value on that axis.\n  /**\n   * @param {Array.<Vector>} points The points to flatten.\n   * @param {Vector} normal The unit vector axis to flatten on.\n   * @param {Array.<number>} result An array.  After calling this function,\n   *   result[0] will be the minimum value,\n   *   result[1] will be the maximum value.\n   */\n  function flattenPointsOn(points, normal, result) {\n    var min = Number.MAX_VALUE;\n    var max = -Number.MAX_VALUE;\n    var len = points.length;\n    for (var i = 0; i < len; i++ ) {\n      // The magnitude of the projection of the point onto the normal\n      var dot = points[i].dot(normal);\n      if (dot < min) { min = dot; }\n      if (dot > max) { max = dot; }\n    }\n    result[0] = min; result[1] = max;\n  }\n  \n  // Check whether two convex polygons are separated by the specified\n  // axis (must be a unit vector).\n  /**\n   * @param {Vector} aPos The position of the first polygon.\n   * @param {Vector} bPos The position of the second polygon.\n   * @param {Array.<Vector>} aPoints The points in the first polygon.\n   * @param {Array.<Vector>} bPoints The points in the second polygon.\n   * @param {Vector} axis The axis (unit sized) to test against.  The points of both polygons\n   *   will be projected onto this axis.\n   * @param {Response=} response A Response object (optional) which will be populated\n   *   if the axis is not a separating axis.\n   * @return {boolean} true if it is a separating axis, false otherwise.  If false,\n   *   and a response is passed in, information about how much overlap and\n   *   the direction of the overlap will be populated.\n   */\n  function isSeparatingAxis(aPos, bPos, aPoints, bPoints, axis, response) {\n    var rangeA = T_ARRAYS.pop();\n    var rangeB = T_ARRAYS.pop();\n    // The magnitude of the offset between the two polygons\n    var offsetV = T_VECTORS.pop().copy(bPos).sub(aPos);\n    var projectedOffset = offsetV.dot(axis);\n    // Project the polygons onto the axis.\n    flattenPointsOn(aPoints, axis, rangeA);\n    flattenPointsOn(bPoints, axis, rangeB);\n    // Move B's range to its position relative to A.\n    rangeB[0] += projectedOffset;\n    rangeB[1] += projectedOffset;\n    // Check if there is a gap. If there is, this is a separating axis and we can stop\n    if (rangeA[0] > rangeB[1] || rangeB[0] > rangeA[1]) {\n      T_VECTORS.push(offsetV); \n      T_ARRAYS.push(rangeA); \n      T_ARRAYS.push(rangeB);\n      return true;\n    }\n    // This is not a separating axis. If we're calculating a response, calculate the overlap.\n    if (response) {\n      var overlap = 0;\n      // A starts further left than B\n      if (rangeA[0] < rangeB[0]) {\n        response['aInB'] = false;\n        // A ends before B does. We have to pull A out of B\n        if (rangeA[1] < rangeB[1]) { \n          overlap = rangeA[1] - rangeB[0];\n          response['bInA'] = false;\n        // B is fully inside A.  Pick the shortest way out.\n        } else {\n          var option1 = rangeA[1] - rangeB[0];\n          var option2 = rangeB[1] - rangeA[0];\n          overlap = option1 < option2 ? option1 : -option2;\n        }\n      // B starts further left than A\n      } else {\n        response['bInA'] = false;\n        // B ends before A ends. We have to push A out of B\n        if (rangeA[1] > rangeB[1]) { \n          overlap = rangeA[0] - rangeB[1];\n          response['aInB'] = false;\n        // A is fully inside B.  Pick the shortest way out.\n        } else {\n          var option1 = rangeA[1] - rangeB[0];\n          var option2 = rangeB[1] - rangeA[0];\n          overlap = option1 < option2 ? option1 : -option2;\n        }\n      }\n      // If this is the smallest amount of overlap we've seen so far, set it as the minimum overlap.\n      var absOverlap = Math.abs(overlap);\n      if (absOverlap < response['overlap']) {\n        response['overlap'] = absOverlap;\n        response['overlapN'].copy(axis);\n        if (overlap < 0) {\n          response['overlapN'].reverse();\n        }\n      }      \n    }\n    T_VECTORS.push(offsetV); \n    T_ARRAYS.push(rangeA); \n    T_ARRAYS.push(rangeB);\n    return false;\n  }\n  \n  // Calculates which Vornoi region a point is on a line segment.\n  // It is assumed that both the line and the point are relative to `(0,0)`\n  //\n  //            |       (0)      |\n  //     (-1)  [S]--------------[E]  (1)\n  //            |       (0)      |\n  /**\n   * @param {Vector} line The line segment.\n   * @param {Vector} point The point.\n   * @return  {number} LEFT_VORNOI_REGION (-1) if it is the left region, \n   *          MIDDLE_VORNOI_REGION (0) if it is the middle region, \n   *          RIGHT_VORNOI_REGION (1) if it is the right region.\n   */\n  function vornoiRegion(line, point) {\n    var len2 = line.len2();\n    var dp = point.dot(line);\n    // If the point is beyond the start of the line, it is in the\n    // left vornoi region.\n    if (dp < 0) { return LEFT_VORNOI_REGION; }\n    // If the point is beyond the end of the line, it is in the\n    // right vornoi region.\n    else if (dp > len2) { return RIGHT_VORNOI_REGION; }\n    // Otherwise, it's in the middle one.\n    else { return MIDDLE_VORNOI_REGION; }\n  }\n  // Constants for Vornoi regions\n  /**\n   * @const\n   */\n  var LEFT_VORNOI_REGION = -1;\n  /**\n   * @const\n   */\n  var MIDDLE_VORNOI_REGION = 0;\n  /**\n   * @const\n   */\n  var RIGHT_VORNOI_REGION = 1;\n  \n  // ## Collision Tests\n\n  // Check if a point is inside a circle.\n  /**\n   * @param {Vector} p The point to test.\n   * @param {Circle} c The circle to test.\n   * @return {boolean} true if the point is inside the circle, false if it is not.\n   */\n  function pointInCircle(p, c) {\n    var differenceV = T_VECTORS.pop().copy(p).sub(c['pos']);\n    var radiusSq = c['r'] * c['r'];\n    var distanceSq = differenceV.len2();\n    T_VECTORS.push(differenceV);\n    // If the distance between is smaller than the radius then the point is inside the circle.\n    return distanceSq <= radiusSq;\n  }\n  SAT['pointInCircle'] = pointInCircle;\n\n  // Check if a point is inside a convex polygon.\n  /**\n   * @param {Vector} p The point to test.\n   * @param {Polygon} poly The polygon to test.\n   * @return {boolean} true if the point is inside the polygon, false if it is not.\n   */\n  function pointInPolygon(p, poly) {\n    UNIT_SQUARE['pos'].copy(p);\n    T_RESPONSE.clear();\n    var result = testPolygonPolygon(UNIT_SQUARE, poly, T_RESPONSE);\n    if (result) {\n      result = T_RESPONSE['aInB'];\n    }\n    return result;\n  }\n  SAT['pointInPolygon'] = pointInPolygon;\n\n  // Check if two circles collide.\n  /**\n   * @param {Circle} a The first circle.\n   * @param {Circle} b The second circle.\n   * @param {Response=} response Response object (optional) that will be populated if\n   *   the circles intersect.\n   * @return {boolean} true if the circles intersect, false if they don't. \n   */\n  function testCircleCircle(a, b, response) {\n    // Check if the distance between the centers of the two\n    // circles is greater than their combined radius.\n    var differenceV = T_VECTORS.pop().copy(b['pos']).sub(a['pos']);\n    var totalRadius = a['r'] + b['r'];\n    var totalRadiusSq = totalRadius * totalRadius;\n    var distanceSq = differenceV.len2();\n    // If the distance is bigger than the combined radius, they don't intersect.\n    if (distanceSq > totalRadiusSq) {\n      T_VECTORS.push(differenceV);\n      return false;\n    }\n    // They intersect.  If we're calculating a response, calculate the overlap.\n    if (response) { \n      var dist = Math.sqrt(distanceSq);\n      response['a'] = a;\n      response['b'] = b;\n      response['overlap'] = totalRadius - dist;\n      response['overlapN'].copy(differenceV.normalize());\n      response['overlapV'].copy(differenceV).scale(response['overlap']);\n      response['aInB']= a['r'] <= b['r'] && dist <= b['r'] - a['r'];\n      response['bInA'] = b['r'] <= a['r'] && dist <= a['r'] - b['r'];\n    }\n    T_VECTORS.push(differenceV);\n    return true;\n  }\n  SAT['testCircleCircle'] = testCircleCircle;\n  \n  // Check if a polygon and a circle collide.\n  /**\n   * @param {Polygon} polygon The polygon.\n   * @param {Circle} circle The circle.\n   * @param {Response=} response Response object (optional) that will be populated if\n   *   they interset.\n   * @return {boolean} true if they intersect, false if they don't.\n   */\n  function testPolygonCircle(polygon, circle, response) {\n    // Get the position of the circle relative to the polygon.\n    var circlePos = T_VECTORS.pop().copy(circle['pos']).sub(polygon['pos']);\n    var radius = circle['r'];\n    var radius2 = radius * radius;\n    var points = polygon['calcPoints'];\n    var len = points.length;\n    var edge = T_VECTORS.pop();\n    var point = T_VECTORS.pop();\n    \n    // For each edge in the polygon:\n    for (var i = 0; i < len; i++) {\n      var next = i === len - 1 ? 0 : i + 1;\n      var prev = i === 0 ? len - 1 : i - 1;\n      var overlap = 0;\n      var overlapN = null;\n      \n      // Get the edge.\n      edge.copy(polygon['edges'][i]);\n      // Calculate the center of the circle relative to the starting point of the edge.\n      point.copy(circlePos).sub(points[i]);\n      \n      // If the distance between the center of the circle and the point\n      // is bigger than the radius, the polygon is definitely not fully in\n      // the circle.\n      if (response && point.len2() > radius2) {\n        response['aInB'] = false;\n      }\n      \n      // Calculate which Vornoi region the center of the circle is in.\n      var region = vornoiRegion(edge, point);\n      // If it's the left region:\n      if (region === LEFT_VORNOI_REGION) { \n        // We need to make sure we're in the RIGHT_VORNOI_REGION of the previous edge.\n        edge.copy(polygon['edges'][prev]);\n        // Calculate the center of the circle relative the starting point of the previous edge\n        var point2 = T_VECTORS.pop().copy(circlePos).sub(points[prev]);\n        region = vornoiRegion(edge, point2);\n        if (region === RIGHT_VORNOI_REGION) {\n          // It's in the region we want.  Check if the circle intersects the point.\n          var dist = point.len();\n          if (dist > radius) {\n            // No intersection\n            T_VECTORS.push(circlePos); \n            T_VECTORS.push(edge);\n            T_VECTORS.push(point); \n            T_VECTORS.push(point2);\n            return false;\n          } else if (response) {\n            // It intersects, calculate the overlap.\n            response['bInA'] = false;\n            overlapN = point.normalize();\n            overlap = radius - dist;\n          }\n        }\n        T_VECTORS.push(point2);\n      // If it's the right region:\n      } else if (region === RIGHT_VORNOI_REGION) {\n        // We need to make sure we're in the left region on the next edge\n        edge.copy(polygon['edges'][next]);\n        // Calculate the center of the circle relative to the starting point of the next edge.\n        point.copy(circlePos).sub(points[next]);\n        region = vornoiRegion(edge, point);\n        if (region === LEFT_VORNOI_REGION) {\n          // It's in the region we want.  Check if the circle intersects the point.\n          var dist = point.len();\n          if (dist > radius) {\n            // No intersection\n            T_VECTORS.push(circlePos); \n            T_VECTORS.push(edge); \n            T_VECTORS.push(point);\n            return false;              \n          } else if (response) {\n            // It intersects, calculate the overlap.\n            response['bInA'] = false;\n            overlapN = point.normalize();\n            overlap = radius - dist;\n          }\n        }\n      // Otherwise, it's the middle region:\n      } else {\n        // Need to check if the circle is intersecting the edge,\n        // Change the edge into its \"edge normal\".\n        var normal = edge.perp().normalize();\n        // Find the perpendicular distance between the center of the \n        // circle and the edge.\n        var dist = point.dot(normal);\n        var distAbs = Math.abs(dist);\n        // If the circle is on the outside of the edge, there is no intersection.\n        if (dist > 0 && distAbs > radius) {\n          // No intersection\n          T_VECTORS.push(circlePos); \n          T_VECTORS.push(normal); \n          T_VECTORS.push(point);\n          return false;\n        } else if (response) {\n          // It intersects, calculate the overlap.\n          overlapN = normal;\n          overlap = radius - dist;\n          // If the center of the circle is on the outside of the edge, or part of the\n          // circle is on the outside, the circle is not fully inside the polygon.\n          if (dist >= 0 || overlap < 2 * radius) {\n            response['bInA'] = false;\n          }\n        }\n      }\n      \n      // If this is the smallest overlap we've seen, keep it. \n      // (overlapN may be null if the circle was in the wrong Vornoi region).\n      if (overlapN && response && Math.abs(overlap) < Math.abs(response['overlap'])) {\n        response['overlap'] = overlap;\n        response['overlapN'].copy(overlapN);\n      }\n    }\n    \n    // Calculate the final overlap vector - based on the smallest overlap.\n    if (response) {\n      response['a'] = polygon;\n      response['b'] = circle;\n      response['overlapV'].copy(response['overlapN']).scale(response['overlap']);\n    }\n    T_VECTORS.push(circlePos); \n    T_VECTORS.push(edge); \n    T_VECTORS.push(point);\n    return true;\n  }\n  SAT['testPolygonCircle'] = testPolygonCircle;\n  \n  // Check if a circle and a polygon collide.\n  //\n  // **NOTE:** This is slightly less efficient than polygonCircle as it just\n  // runs polygonCircle and reverses everything at the end.\n  /**\n   * @param {Circle} circle The circle.\n   * @param {Polygon} polygon The polygon.\n   * @param {Response=} response Response object (optional) that will be populated if\n   *   they interset.\n   * @return {boolean} true if they intersect, false if they don't.\n   */\n  function testCirclePolygon(circle, polygon, response) {\n    // Test the polygon against the circle.\n    var result = testPolygonCircle(polygon, circle, response);\n    if (result && response) {\n      // Swap A and B in the response.\n      var a = response['a'];\n      var aInB = response['aInB'];\n      response['overlapN'].reverse();\n      response['overlapV'].reverse();\n      response['a'] = response['b'];\n      response['b'] = a;\n      response['aInB'] = response['bInA'];\n      response['bInA'] = aInB;\n    }\n    return result;\n  }\n  SAT['testCirclePolygon'] = testCirclePolygon;\n  \n  // Checks whether polygons collide.\n  /**\n   * @param {Polygon} a The first polygon.\n   * @param {Polygon} b The second polygon.\n   * @param {Response=} response Response object (optional) that will be populated if\n   *   they interset.\n   * @return {boolean} true if they intersect, false if they don't.\n   */\n  function testPolygonPolygon(a, b, response) {\n    var aPoints = a['calcPoints'];\n    var aLen = aPoints.length;\n    var bPoints = b['calcPoints'];\n    var bLen = bPoints.length;\n    // If any of the edge normals of A is a separating axis, no intersection.\n    for (var i = 0; i < aLen; i++) {\n      if (isSeparatingAxis(a['pos'], b['pos'], aPoints, bPoints, a['normals'][i], response)) {\n        return false;\n      }\n    }\n    // If any of the edge normals of B is a separating axis, no intersection.\n    for (var i = 0;i < bLen; i++) {\n      if (isSeparatingAxis(a['pos'], b['pos'], aPoints, bPoints, b['normals'][i], response)) {\n        return false;\n      }\n    }\n    // Since none of the edge normals of A or B are a separating axis, there is an intersection\n    // and we've already calculated the smallest overlap (in isSeparatingAxis).  Calculate the\n    // final overlap vector.\n    if (response) {\n      response['a'] = a;\n      response['b'] = b;\n      response['overlapV'].copy(response['overlapN']).scale(response['overlap']);\n    }\n    return true;\n  }\n  SAT['testPolygonPolygon'] = testPolygonPolygon;\n\n  return SAT;\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sat/SAT.js\n ** module id = 9\n ** module chunks = 0\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 10\n ** module chunks = 0\n **/","module.exports = function() { throw new Error(\"define cannot be used indirect\"); };\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/amd-define.js\n ** module id = 11\n ** module chunks = 0\n **/","import ShipModule from \"./ShipModule\";\n\nimport {BLOCK_SIZE} from \"../Constants\"\n\n\nconst MASS = 5;\nconst ENGINE_POWER = 100;\nconst TURN_POWER = 5;\nconst COST = 50;\nconst HITPOINTS = 5;\nconst POWER_GENERATION = 0;\n\nexport default class Engine extends ShipModule {\n\n  constructor(ship,x,y){\n    super(ship, x, y, MASS, ENGINE_POWER, TURN_POWER, COST, HITPOINTS,POWER_GENERATION, BLOCK_SIZE, BLOCK_SIZE);\n  }\n\n  draw(screen){\n    screen.save();\n    screen.translate(this.x,this.y);\n\n\n    if(this.ship.accelerating){\n      screen.fillStyle = \"#66ff66\";\n      screen.beginPath();\n      screen.lineTo(0,0);\n      screen.lineTo(BLOCK_SIZE,0);\n      screen.lineTo(BLOCK_SIZE,BLOCK_SIZE/2);\n      screen.lineTo(BLOCK_SIZE/2,BLOCK_SIZE);\n      screen.lineTo(0,BLOCK_SIZE/2);\n      screen.closePath();\n      screen.fill();\n    }\n\n    screen.fillStyle = \"#00aa00\";\n    screen.beginPath();\n    screen.lineTo(0,0);\n    screen.lineTo(BLOCK_SIZE,0);\n    screen.lineTo(BLOCK_SIZE,BLOCK_SIZE/2);\n    screen.lineTo(BLOCK_SIZE/2,BLOCK_SIZE/3);\n    screen.lineTo(0,BLOCK_SIZE/2);\n    screen.closePath();\n    screen.fill();\n\n\n    screen.restore();\n\n\n    // var newScreen = screen.canvas.getContext('2d');\n    // newScreen.restore();\n    // this.drawBoundingBox(newScreen);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/js/ship_modules/Engine.js\n **/","import SAT from \"sat\";\nconst V = SAT.Vector;\n\nimport Sprite from \"../Sprite\"\n\nimport {BLOCK_SIZE} from \"../Constants\"\n\nvar ship,game;\nvar x,y,angle;\nvar _mass,_enginePower, _turnPower, _cost, _hitpoints;\n\nexport default class ShipModule extends Sprite {\n\n  constructor(ship, x, y, mass, enginePower, turnPower, cost, hp, powerGeneration, width=BLOCK_SIZE, height=BLOCK_SIZE) {\n    super();\n    this.x = x;\n    this.y = y;\n\n    this._width = width;\n    this._height = height;\n\n    this.ship = ship;\n    this.game = ship.game;\n\n    this.angle = 0;\n\n    this._mass = mass;\n    this._enginePower = enginePower;\n    this._turnPower = turnPower;\n    this._cost = cost;\n    this._hitpoints = hp;\n    this._remainingHitpoints = hp;\n    this._powerGeneration = powerGeneration;\n  }\n\n  get mass(){\n    return this._mass;\n  }\n\n  get enginePower(){\n    return this._enginePower;\n  }\n\n  get turnPower(){\n    return this._turnPower;\n  }\n\n  get cost() {\n    return this._cost;\n  }\n\n  get hp(){\n    return this._hitpoints;\n  }\n\n  get powerGeneration(){\n    return this._powerGeneration;\n  }\n\n  get height(){\n      return this._height;\n  }\n\n  get globalAngle(){\n      return this.angle+this.ship.angle;\n  }\n\n  get drawParent(){\n      return this.ship;\n  }\n\n  get width() {\n      return this._width;\n  }\n\n  get globalX(){\n    return this.worldPos[0];\n  }\n\n  get globalY(){\n    return this.worldPos[1];\n  }\n\n  get worldPos(){\n    const shipAngle = this.ship.angle+Math.PI/2;\n    const shipCenterOffestX = this.x+BLOCK_SIZE/2 - this.ship.pivotX;\n    const shipCenterOffestY = this.y+BLOCK_SIZE/2 - this.ship.pivotY;\n\n    const x = this.ship.x + Math.cos(shipAngle)*(shipCenterOffestX) - Math.sin(shipAngle)*shipCenterOffestY;\n    const y = this.ship.y + Math.sin(shipAngle)*(shipCenterOffestX) + Math.cos(shipAngle)*shipCenterOffestY;\n    return [x,y];\n  }\n\n  recieveDamage(dmg){\n    this._remainingHitpoints -= dmg;\n    if(this._remainingHitpoints <= 0){\n      this.die();\n    }\n  }\n\n  die(){\n    this.ship.removeModule(this);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/js/ship_modules/ShipModule.js\n **/","export const DEGREE = (Math.PI/180);\nexport const BLOCK_SIZE = 15;\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/js/Constants.js\n **/","\nimport ShipModule from \"./ShipModule\";\n\nimport {BLOCK_SIZE} from \"../Constants\"\n\nvar x;\nvar y;\n\nconst MASS = 1;\nconst ENGINE_POWER = 1;\nconst TURN_POWER = 5;\nconst COST = 0;\nconst HITPOINTS = 5;\nconst POWER_GENERATION = 1;\n\nexport default class Core extends ShipModule {\n\n\n  constructor(ship, x,y){\n    super(ship, x, y, MASS, ENGINE_POWER, TURN_POWER, COST, HITPOINTS,POWER_GENERATION);\n  }\n\n  draw(screen){\n    screen.save();\n    screen.translate(this.x,this.y);\n    screen.fillStyle = \"#666666\";\n    screen.fillRect(0,0,BLOCK_SIZE,BLOCK_SIZE);\n\n    screen.fillStyle = \"#ff3300\";\n    screen.beginPath();\n    screen.arc(BLOCK_SIZE/2,BLOCK_SIZE/2,BLOCK_SIZE/3,0,2*Math.PI);\n    screen.closePath();\n    screen.fill();\n\n    screen.restore();\n  }\n\n  die(){\n    super.die();\n    this.ship.die();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/js/ship_modules/Core.js\n **/","import ShipModule from \"./ShipModule\";\n\nimport {BLOCK_SIZE} from \"../Constants\"\n\nconst MASS = 100;\nconst ENGINE_POWER = 0;\nconst TURN_POWER = 0;\nconst COST = 5;\nconst HITPOINTS = 50;\nconst POWER_GENERATION = 0;\n\nexport default class Armor extends ShipModule {\n\n  constructor(ship, x,y){\n    super(ship, x, y, MASS, ENGINE_POWER, TURN_POWER, COST, HITPOINTS,POWER_GENERATION);\n  }\n\n  draw(screen){\n    screen.save();\n    screen.translate(this.x,this.y);\n    screen.fillStyle = \"#999999\";\n    screen.fillRect(0,0,BLOCK_SIZE,BLOCK_SIZE);\n    screen.restore();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/js/ship_modules/Armor.js\n **/","import ShipModule from \"./ShipModule\";\n\nimport {BLOCK_SIZE} from \"../Constants\"\n\nconst MASS = 15;\nconst ENGINE_POWER = 0;\nconst TURN_POWER = 350;\nconst COST = 5;\nconst HITPOINTS = 10;\nconst POWER_GENERATION = 0;\n\nvar _isOnLeftSide;\n\n\nexport default class Wing extends ShipModule {\n\n  constructor(ship, isOnLeftSide,x,y){\n    super(ship, x, y, MASS, ENGINE_POWER, TURN_POWER, COST, HITPOINTS,POWER_GENERATION, BLOCK_SIZE, BLOCK_SIZE);\n    _isOnLeftSide = isOnLeftSide;\n  }\n\n  draw(screen){\n    screen.save();\n    screen.translate(this.x,this.y);\n\n    screen.fillStyle = \"#0066ff\";\n    screen.fillRect(0,0,BLOCK_SIZE,BLOCK_SIZE);\n\n    screen.restore();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/js/ship_modules/Wing.js\n **/","import {BLOCK_SIZE} from \"../../Constants\"\n\nimport ShipModule from \"../ShipModule\"\nimport Bullet from \"./Bullet\"\n\n\nconst MASS = 25;\nconst ENGINE_POWER = 0;\nconst TURN_POWER = 0;\nconst COST = 25;\nconst HITPOINTS = 10;\nconst POWER_GENERATION = 0;\n\nexport default class Gun extends ShipModule {\n\n  constructor(ship, x, y){\n    super(ship, x, y, MASS, ENGINE_POWER, TURN_POWER, COST, HITPOINTS,POWER_GENERATION);\n\n    this.timeToReload = 25;\n    this.reloadTimeLeft = 0;\n  }\n\n  draw(screen){\n    screen.save();\n    screen.translate(this.x,this.y);\n\n    screen.fillStyle = \"#333333\";\n    screen.beginPath();\n\n    screen.lineTo(BLOCK_SIZE,BLOCK_SIZE);\n    screen.lineTo(0,BLOCK_SIZE);\n    screen.lineTo(0,BLOCK_SIZE*0.3);\n\n    screen.lineTo(BLOCK_SIZE*0.3,BLOCK_SIZE*0.3);\n    screen.lineTo(BLOCK_SIZE*0.3,0);\n    screen.lineTo(BLOCK_SIZE*0.7,0);\n    screen.lineTo(BLOCK_SIZE*0.7,BLOCK_SIZE*0.3);\n\n    screen.lineTo(BLOCK_SIZE,BLOCK_SIZE*0.3);\n\n\n    screen.closePath();\n    screen.fill();\n\n    screen.fillStyle = \"#ffff00\";\n    var maxWidth = this.width-1;\n    screen.fillRect(1,this.height-2,maxWidth*(1-this.reloadTimeLeft/this.timeToReload),1);\n\n    screen.restore();\n  }\n\n  tick(){\n    this.reloadTimeLeft = Math.max(this.reloadTimeLeft-1,0);\n    if(this.ship._firingPrimary && this.reloadTimeLeft <= 0){\n      this.reloadTimeLeft = this.timeToReload;\n      this.game.spawn(new Bullet(this, ...this.worldPos, this.ship.angle),\"SHOTS\");\n    }\n  }\n\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/js/ship_modules/gun/Gun.js\n **/","import Sprite from \"../../Sprite\"\n\nconst DEGREE = (Math.PI/180);\n\nvar _x,_y,gun;\n\nexport default class Bullet extends Sprite {\n\n  constructor(gun, x,y,angle){\n    super();\n\n    this.gun = gun;\n    this._x = x;\n    this._y = y;\n    this.speed = 6;\n    this.angle = angle;\n    this.age = 0;\n\n    this.damage = 2;\n\n    this.dx = Math.cos(this.angle)*this.speed;\n    this.dy = Math.sin(this.angle)*this.speed;\n  }\n\n  tick() {\n    this.age++;\n    this._x += this.dx;\n    this._y += this.dy;\n\n    if(this.age > 100){\n      this.die();\n    }\n\n    this.wrapAroundWorld();\n  }\n\n  die(){\n    this.gun.game.removeShot(this)\n  }\n\n  draw(screen){\n\n    screen.save();\n    screen.translate(this._x,this._y);\n    screen.rotate(90*DEGREE);\n    screen.rotate(this.angle);\n\n\n    screen.beginPath();\n    screen.lineTo(-1,0);\n    screen.lineTo(-1,-3);\n    screen.lineTo(0,-5);\n    screen.lineTo(1,-3);\n    screen.lineTo(1,0);\n\n    screen.closePath();\n    screen.fillStyle = \"red\";\n    screen.fill();\n\n    screen.restore();\n  }\n\n  wrapAroundWorld(){\n    var cw = this.gun.game.canvas.getAttribute(\"width\");\n    var ch = this.gun.game.canvas.getAttribute(\"height\");\n    if(this._x < 0){\n      this._x = cw - this.x;\n    }else if(this._x > cw){\n      this._x = this._x - cw;\n    }\n    if(this._y < 0){\n      this._y = ch - this._y;\n    }else if(this._y > ch){\n      this._y = this._y - ch;\n    }\n  }\n\n\n  get width(){\n    return 2;\n  }\n\n  get height(){\n    return 5;\n  }\n\n  get globalX(){\n    return this._x;\n  }\n\n  get globalY(){\n    return this._y;\n  }\n\n\n  get globalAngle(){\n      return this.angle;\n  }\n\n\n  collide(collidedWith){\n    collidedWith.recieveDamage(this.damage);\n    this.die();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/js/ship_modules/gun/Bullet.js\n **/","import Ship from \"./Ship\"\n\n\n\nexport default class DummyShip extends Ship {\n\n  constructor(game, x, y, angle, schematic) {\n    super(game, x, y, angle, schematic);\n\n    this._turningCCW = true;\n    this._turningCW = false;\n    this.accelerating = true;\n    this._firingPrimary = true;\n\n    this.age = Math.floor(Math.random()*1000);\n  }\n\n  tick(){\n    this.age++;\n\n    if(this.age % 128 == 0){\n      this._turningCCW = !this._turningCCW;\n    }\n    if(this.age % 200 == 0){\n      this._turningCW = !this._turningCW;\n    }\n\n    super.tick();\n  }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/js/DummyShip.js\n **/","export const KEY_MAP = {\n  SHIFT: 16, //SHIFT KEY,\n  SPACE: 32, //SHIFT KEY,\n  W: 87,\n  S: 65,\n  D: 68,\n  LEFT: 37,\n  RIGHT: 39,\n  UP: 38,\n  ENTER: 13,\n  CTRL: 17,\n  NUM_0: 96,\n  \n\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/js/Keys.js\n **/"],"sourceRoot":""}